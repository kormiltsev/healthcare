package main

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
)

// google fit ==============================
type AutoGenerated struct {
	DataSource string      `json:"Data Source"`
	DataPoints []DataPoint `json:"Data Points"`
}

type DataPoint struct {
	FitValue           []FitVal `json:"fitValue"`
	OriginDataSourceID string   `json:"originDataSourceId"`
	EndTimeNanos       int64    `json:"endTimeNanos"`
	DataTypeName       string   `json:"dataTypeName"`
	StartTimeNanos     int64    `json:"startTimeNanos"`
	ModifiedTimeMillis int64    `json:"modifiedTimeMillis"`
	RawTimestampNanos  int      `json:"rawTimestampNanos"`
}

type FitVal struct {
	Value Valu `json:"value"`
}

type Valu struct {
	IntVal int     `json:"intVal"`
	FpVal  float64 `json:"fpVal"`
}

// ========================================

var fdir = "./data/googlefit/*.json"

func main() {
	googlered := 0
	jsons, err := filepath.Glob(fdir)
	if err != nil {
		fmt.Println("ERR: DIR no json files in directory", err)
	}
	fmt.Println("files qty = ", len(jsons))
	for _, filename := range jsons {
		f, err := os.Open(filename)
		if err != nil {
			//er.Err = append(er.Err, fmt.Sprint("ERR: FILE ", fdir, " Cant open file ", filename))
			continue
		}
		//defer f.Close()
		jsonParser := json.NewDecoder(f)
		var str AutoGenerated
		if err := jsonParser.Decode(&str); err != nil {
			//er.Err = append(er.Err, fmt.Sprint("ERR: JSON ", fdir, " Cant decode json. File name is ", filename))
			f.Close()
			continue
		}
		f.Close()
		googlered += 1
		fmt.Println(len(str.DataPoints))
	}
	fmt.Println("files opened: ", googlered, " of ", len(jsons))
}
