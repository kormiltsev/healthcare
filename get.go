package main

import (
	"fmt"
	"log"

	"github.com/go-pg/pg"
	"github.com/joho/godotenv"
)

type AutoGenerated struct {
	DataSource string      `json:"Data Source"`
	DataPoints []DataPoint `json:"Data Points"`
}

type DataPoint struct {
	FitValue           []FitVal `json:"fitValue"`
	OriginDataSourceID string   `json:"originDataSourceId"`
	EndTimeNanos       int64    `json:"endTimeNanos"`
	DataTypeName       string   `json:"dataTypeName"`
	StartTimeNanos     int64    `json:"startTimeNanos"`
	ModifiedTimeMillis int64    `json:"modifiedTimeMillis"`
	RawTimestampNanos  int      `json:"rawTimestampNanos"`
}

type FitVal struct {
	Value Valu `json:"value"`
}

type Valu struct {
	IntVal int     `json:"intVal"`
	FpVal  float64 `json:"fpVal"`
}

func panicIf(err error) {
	if err != nil {
		panic(err)
	}
}
func main() {
	godotenv.Load()

	// adr := os.Getenv("DBADR")
	// usr := os.Getenv("DBUSER")
	// pwd := os.Getenv("DBPWD")
	// dbs := os.Getenv("DBTYPE")

	adr := "localhost:5432"
	usr := "postgres"
	pwd := "sql"
	dbs := "postgres"

	if adr == "" {
		log.Printf("cant find DB specs in .env")
	}
	// connect to DB
	db := pg.Connect(&pg.Options{
		Addr:     adr,
		User:     usr,
		Password: pwd,
		Database: dbs,
	})
	defer db.Close()

	var str2 []AutoGenerated
	err := db.Model(&str2).Select()
	if err != nil {
		panic(err)
	}
	fmt.Println(len(str2))
}
